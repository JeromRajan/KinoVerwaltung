//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export module Api {

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    registrieren(body: BenutzerRegistrierungDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Benutzer/registrieren";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegistrieren(_response);
        });
    }

    protected processRegistrieren(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: BenutzerLoginDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Benutzer/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    aktualisieren(benutzerId: number, body: BenutzerUpdateDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Benutzer/aktualisieren/{benutzerId}";
        if (benutzerId === undefined || benutzerId === null)
            throw new Error("The parameter 'benutzerId' must be defined.");
        url_ = url_.replace("{benutzerId}", encodeURIComponent("" + benutzerId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAktualisieren(_response);
        });
    }

    protected processAktualisieren(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    rollen(body: Rolle | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Benutzer/rollen";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRollen(_response);
        });
    }

    protected processRollen(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    filmGET(): Promise<void> {
        let url_ = this.baseUrl + "/api/Film";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFilmGET(_response);
        });
    }

    protected processFilmGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    filmPOST(body: Film | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Film";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFilmPOST(_response);
        });
    }

    protected processFilmPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    filmGET2(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Film/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFilmGET2(_response);
        });
    }

    protected processFilmGET2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    filmPUT(id: number, body: Film | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Film/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFilmPUT(_response);
        });
    }

    protected processFilmPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    filmDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Film/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFilmDELETE(_response);
        });
    }

    protected processFilmDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    genresGET(): Promise<void> {
        let url_ = this.baseUrl + "/api/Film/genres";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGenresGET(_response);
        });
    }

    protected processGenresGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    genresPOST(body: Genre | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Film/genres";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGenresPOST(_response);
        });
    }

    protected processGenresPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    genresPUT(id: number, body: Genre | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Film/genres/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGenresPUT(_response);
        });
    }

    protected processGenresPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    genresDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Film/genres/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGenresDELETE(_response);
        });
    }

    protected processGenresDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    sprachenGET(): Promise<void> {
        let url_ = this.baseUrl + "/api/Film/sprachen";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSprachenGET(_response);
        });
    }

    protected processSprachenGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sprachenPOST(body: Sprache | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Film/sprachen";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSprachenPOST(_response);
        });
    }

    protected processSprachenPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sprachenPUT(id: number, body: Sprache | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Film/sprachen/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSprachenPUT(_response);
        });
    }

    protected processSprachenPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    sprachenDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Film/sprachen/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSprachenDELETE(_response);
        });
    }

    protected processSprachenDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    kinoAll(): Promise<Kino[]> {
        let url_ = this.baseUrl + "/api/Kino";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKinoAll(_response);
        });
    }

    protected processKinoAll(response: Response): Promise<Kino[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Kino.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Kino[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    kinoPOST(body: Kino | undefined): Promise<Kino> {
        let url_ = this.baseUrl + "/api/Kino";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKinoPOST(_response);
        });
    }

    protected processKinoPOST(response: Response): Promise<Kino> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Kino.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Kino>(null as any);
    }

    /**
     * @return Success
     */
    kinoGET(id: number): Promise<Kino> {
        let url_ = this.baseUrl + "/api/Kino/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKinoGET(_response);
        });
    }

    protected processKinoGET(response: Response): Promise<Kino> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Kino.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Kino>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    saalPOST(kinoId: number, body: SaalDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Kino/{kinoId}/saal";
        if (kinoId === undefined || kinoId === null)
            throw new Error("The parameter 'kinoId' must be defined.");
        url_ = url_.replace("{kinoId}", encodeURIComponent("" + kinoId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaalPOST(_response);
        });
    }

    protected processSaalPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    saalDELETE(saalId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Kino/saal/{saalId}";
        if (saalId === undefined || saalId === null)
            throw new Error("The parameter 'saalId' must be defined.");
        url_ = url_.replace("{saalId}", encodeURIComponent("" + saalId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaalDELETE(_response);
        });
    }

    protected processSaalDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    saalPUT(saalId: number, body: SaalDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Kino/saal/{saalId}";
        if (saalId === undefined || saalId === null)
            throw new Error("The parameter 'saalId' must be defined.");
        url_ = url_.replace("{saalId}", encodeURIComponent("" + saalId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaalPUT(_response);
        });
    }

    protected processSaalPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    saele(kinoId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Kino/{kinoId}/saele";
        if (kinoId === undefined || kinoId === null)
            throw new Error("The parameter 'kinoId' must be defined.");
        url_ = url_.replace("{kinoId}", encodeURIComponent("" + kinoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaele(_response);
        });
    }

    protected processSaele(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    mitgliederkarten(): Promise<Mitgliederkarte> {
        let url_ = this.baseUrl + "/api/Mitgliederkarten";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMitgliederkarten(_response);
        });
    }

    protected processMitgliederkarten(response: Response): Promise<Mitgliederkarte> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Mitgliederkarte.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Mitgliederkarte>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    aufladen(identifikationsNummer: string, body: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Mitgliederkarten/{identifikationsNummer}/aufladen";
        if (identifikationsNummer === undefined || identifikationsNummer === null)
            throw new Error("The parameter 'identifikationsNummer' must be defined.");
        url_ = url_.replace("{identifikationsNummer}", encodeURIComponent("" + identifikationsNummer));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAufladen(_response);
        });
    }

    protected processAufladen(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    mitgliederstatus(body: Mitgliederstatus | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Mitgliederkarten/mitgliederstatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMitgliederstatus(_response);
        });
    }

    protected processMitgliederstatus(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    kino(kinoId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Statistik/belegung/kino/{kinoId}";
        if (kinoId === undefined || kinoId === null)
            throw new Error("The parameter 'kinoId' must be defined.");
        url_ = url_.replace("{kinoId}", encodeURIComponent("" + kinoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKino(_response);
        });
    }

    protected processKino(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    saalGET(saalId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Statistik/belegung/saal/{saalId}";
        if (saalId === undefined || saalId === null)
            throw new Error("The parameter 'saalId' must be defined.");
        url_ = url_.replace("{saalId}", encodeURIComponent("" + saalId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaalGET(_response);
        });
    }

    protected processSaalGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    kino2(kinoId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Statistik/umsatz/kino/{kinoId}";
        if (kinoId === undefined || kinoId === null)
            throw new Error("The parameter 'kinoId' must be defined.");
        url_ = url_.replace("{kinoId}", encodeURIComponent("" + kinoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKino2(_response);
        });
    }

    protected processKino2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    saalGET2(saalId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Statistik/umsatz/saal/{saalId}";
        if (saalId === undefined || saalId === null)
            throw new Error("The parameter 'saalId' must be defined.");
        url_ = url_.replace("{saalId}", encodeURIComponent("" + saalId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaalGET2(_response);
        });
    }

    protected processSaalGET2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    benutzer(benutzerId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Statistik/umsatz/benutzer/{benutzerId}";
        if (benutzerId === undefined || benutzerId === null)
            throw new Error("The parameter 'benutzerId' must be defined.");
        url_ = url_.replace("{benutzerId}", encodeURIComponent("" + benutzerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBenutzer(_response);
        });
    }

    protected processBenutzer(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    film(filmId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Statistik/umsatz/film/{filmId}";
        if (filmId === undefined || filmId === null)
            throw new Error("The parameter 'filmId' must be defined.");
        url_ = url_.replace("{filmId}", encodeURIComponent("" + filmId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFilm(_response);
        });
    }

    protected processFilm(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    ticketPOST(body: AddTicketDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Ticket";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTicketPOST(_response);
        });
    }

    protected processTicketPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    ticketGET(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Ticket/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTicketGET(_response);
        });
    }

    protected processTicketGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    ticketPOST2(ticketReferenzNummer: string): Promise<void> {
        let url_ = this.baseUrl + "/api/Ticket/{TicketReferenzNummer}";
        if (ticketReferenzNummer === undefined || ticketReferenzNummer === null)
            throw new Error("The parameter 'ticketReferenzNummer' must be defined.");
        url_ = url_.replace("{TicketReferenzNummer}", encodeURIComponent("" + ticketReferenzNummer));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTicketPOST2(_response);
        });
    }

    protected processTicketPOST2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param benutzerId (optional) 
     * @param vorführungId (optional) 
     * @param sitzId (optional) 
     * @return Success
     */
    inKino(benutzerId: number | undefined, vorführungId: number | undefined, sitzId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Ticket/InKino?";
        if (benutzerId === null)
            throw new Error("The parameter 'benutzerId' cannot be null.");
        else if (benutzerId !== undefined)
            url_ += "BenutzerId=" + encodeURIComponent("" + benutzerId) + "&";
        if (vorführungId === null)
            throw new Error("The parameter 'vorführungId' cannot be null.");
        else if (vorführungId !== undefined)
            url_ += "VorführungId=" + encodeURIComponent("" + vorführungId) + "&";
        if (sitzId === null)
            throw new Error("The parameter 'sitzId' cannot be null.");
        else if (sitzId !== undefined)
            url_ += "SitzId=" + encodeURIComponent("" + sitzId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInKino(_response);
        });
    }

    protected processInKino(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    vorführungGET(): Promise<void> {
        let url_ = this.baseUrl + "/api/Vorführung";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processVorführungGET(_response);
        });
    }

    protected processVorführungGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    vorführungPOST(body: Vorführung | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Vorführung";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processVorführungPOST(_response);
        });
    }

    protected processVorführungPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    vorführungGET2(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Vorführung/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processVorführungGET2(_response);
        });
    }

    protected processVorführungGET2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    vorführungPUT(id: number, body: Vorführung | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Vorführung/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processVorführungPUT(_response);
        });
    }

    protected processVorführungPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    vorführungDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Vorführung/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processVorführungDELETE(_response);
        });
    }

    protected processVorführungDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    woche(): Promise<void> {
        let url_ = this.baseUrl + "/api/Vorführung/woche";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWoche(_response);
        });
    }

    protected processWoche(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    heute(): Promise<void> {
        let url_ = this.baseUrl + "/api/Vorführung/heute";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHeute(_response);
        });
    }

    protected processHeute(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    sitze(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Vorführung/{id}/sitze";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSitze(_response);
        });
    }

    protected processSitze(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    zahlungPOST(body: Zahlungsmethode | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Zahlung";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processZahlungPOST(_response);
        });
    }

    protected processZahlungPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    zahlungGET(): Promise<void> {
        let url_ = this.baseUrl + "/api/Zahlung";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processZahlungGET(_response);
        });
    }

    protected processZahlungGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    zahlungGET2(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Zahlung/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processZahlungGET2(_response);
        });
    }

    protected processZahlungGET2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param referenzNummer (optional) 
     * @param identifikationsNummer (optional) 
     * @return Success
     */
    mitgliederkarte(referenzNummer: string | undefined, identifikationsNummer: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Zahlung/reservierung/mitgliederkarte?";
        if (referenzNummer === null)
            throw new Error("The parameter 'referenzNummer' cannot be null.");
        else if (referenzNummer !== undefined)
            url_ += "referenzNummer=" + encodeURIComponent("" + referenzNummer) + "&";
        if (identifikationsNummer === null)
            throw new Error("The parameter 'identifikationsNummer' cannot be null.");
        else if (identifikationsNummer !== undefined)
            url_ += "identifikationsNummer=" + encodeURIComponent("" + identifikationsNummer) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMitgliederkarte(_response);
        });
    }

    protected processMitgliederkarte(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param referenzNummer (optional) 
     * @return Success
     */
    bar(referenzNummer: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Zahlung/reservierung/bar?";
        if (referenzNummer === null)
            throw new Error("The parameter 'referenzNummer' cannot be null.");
        else if (referenzNummer !== undefined)
            url_ += "referenzNummer=" + encodeURIComponent("" + referenzNummer) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBar(_response);
        });
    }

    protected processBar(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class AddTicketDto implements IAddTicketDto {
    benutzerId?: number;
    vorführungId?: number;
    sitzId?: number;
    zahlungsmethodeId?: number;

    constructor(data?: IAddTicketDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.benutzerId = _data["benutzerId"];
            this.vorführungId = _data["vorführungId"];
            this.sitzId = _data["sitzId"];
            this.zahlungsmethodeId = _data["zahlungsmethodeId"];
        }
    }

    static fromJS(data: any): AddTicketDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddTicketDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["benutzerId"] = this.benutzerId;
        data["vorführungId"] = this.vorführungId;
        data["sitzId"] = this.sitzId;
        data["zahlungsmethodeId"] = this.zahlungsmethodeId;
        return data;
    }
}

export interface IAddTicketDto {
    benutzerId?: number;
    vorführungId?: number;
    sitzId?: number;
    zahlungsmethodeId?: number;
}

export class Adresse implements IAdresse {
    adresseId?: number;
    strasse!: string;
    hausnummer!: string;
    plz!: string;
    stadt!: string;
    land?: string | undefined;
    kinos?: Kino[] | undefined;

    constructor(data?: IAdresse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.adresseId = _data["adresseId"];
            this.strasse = _data["strasse"];
            this.hausnummer = _data["hausnummer"];
            this.plz = _data["plz"];
            this.stadt = _data["stadt"];
            this.land = _data["land"];
            if (Array.isArray(_data["kinos"])) {
                this.kinos = [] as any;
                for (let item of _data["kinos"])
                    this.kinos!.push(Kino.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Adresse {
        data = typeof data === 'object' ? data : {};
        let result = new Adresse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["adresseId"] = this.adresseId;
        data["strasse"] = this.strasse;
        data["hausnummer"] = this.hausnummer;
        data["plz"] = this.plz;
        data["stadt"] = this.stadt;
        data["land"] = this.land;
        if (Array.isArray(this.kinos)) {
            data["kinos"] = [];
            for (let item of this.kinos)
                data["kinos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAdresse {
    adresseId?: number;
    strasse: string;
    hausnummer: string;
    plz: string;
    stadt: string;
    land?: string | undefined;
    kinos?: Kino[] | undefined;
}

export class AdresseDto implements IAdresseDto {
    strasse?: string | undefined;
    hausnummer?: string | undefined;
    plz?: string | undefined;
    stadt?: string | undefined;
    land?: string | undefined;

    constructor(data?: IAdresseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.strasse = _data["strasse"];
            this.hausnummer = _data["hausnummer"];
            this.plz = _data["plz"];
            this.stadt = _data["stadt"];
            this.land = _data["land"];
        }
    }

    static fromJS(data: any): AdresseDto {
        data = typeof data === 'object' ? data : {};
        let result = new AdresseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["strasse"] = this.strasse;
        data["hausnummer"] = this.hausnummer;
        data["plz"] = this.plz;
        data["stadt"] = this.stadt;
        data["land"] = this.land;
        return data;
    }
}

export interface IAdresseDto {
    strasse?: string | undefined;
    hausnummer?: string | undefined;
    plz?: string | undefined;
    stadt?: string | undefined;
    land?: string | undefined;
}

export class Benutzer implements IBenutzer {
    benutzerId?: number;
    vorname!: string;
    nachname!: string;
    email!: string;
    telefon!: string;
    passwort!: string;
    adresseId?: number;
    rolleId?: number;
    adresse?: Adresse;
    tickets?: Ticket[] | undefined;
    rollen?: Rolle[] | undefined;
    rolle?: Rolle;
    mitgliederkarte?: Mitgliederkarte;

    constructor(data?: IBenutzer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.benutzerId = _data["benutzerId"];
            this.vorname = _data["vorname"];
            this.nachname = _data["nachname"];
            this.email = _data["email"];
            this.telefon = _data["telefon"];
            this.passwort = _data["passwort"];
            this.adresseId = _data["adresseId"];
            this.rolleId = _data["rolleId"];
            this.adresse = _data["adresse"] ? Adresse.fromJS(_data["adresse"]) : <any>undefined;
            if (Array.isArray(_data["tickets"])) {
                this.tickets = [] as any;
                for (let item of _data["tickets"])
                    this.tickets!.push(Ticket.fromJS(item));
            }
            if (Array.isArray(_data["rollen"])) {
                this.rollen = [] as any;
                for (let item of _data["rollen"])
                    this.rollen!.push(Rolle.fromJS(item));
            }
            this.rolle = _data["rolle"] ? Rolle.fromJS(_data["rolle"]) : <any>undefined;
            this.mitgliederkarte = _data["mitgliederkarte"] ? Mitgliederkarte.fromJS(_data["mitgliederkarte"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Benutzer {
        data = typeof data === 'object' ? data : {};
        let result = new Benutzer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["benutzerId"] = this.benutzerId;
        data["vorname"] = this.vorname;
        data["nachname"] = this.nachname;
        data["email"] = this.email;
        data["telefon"] = this.telefon;
        data["passwort"] = this.passwort;
        data["adresseId"] = this.adresseId;
        data["rolleId"] = this.rolleId;
        data["adresse"] = this.adresse ? this.adresse.toJSON() : <any>undefined;
        if (Array.isArray(this.tickets)) {
            data["tickets"] = [];
            for (let item of this.tickets)
                data["tickets"].push(item.toJSON());
        }
        if (Array.isArray(this.rollen)) {
            data["rollen"] = [];
            for (let item of this.rollen)
                data["rollen"].push(item.toJSON());
        }
        data["rolle"] = this.rolle ? this.rolle.toJSON() : <any>undefined;
        data["mitgliederkarte"] = this.mitgliederkarte ? this.mitgliederkarte.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBenutzer {
    benutzerId?: number;
    vorname: string;
    nachname: string;
    email: string;
    telefon: string;
    passwort: string;
    adresseId?: number;
    rolleId?: number;
    adresse?: Adresse;
    tickets?: Ticket[] | undefined;
    rollen?: Rolle[] | undefined;
    rolle?: Rolle;
    mitgliederkarte?: Mitgliederkarte;
}

export class BenutzerLoginDto implements IBenutzerLoginDto {
    email?: string | undefined;
    passwort?: string | undefined;

    constructor(data?: IBenutzerLoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.passwort = _data["passwort"];
        }
    }

    static fromJS(data: any): BenutzerLoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new BenutzerLoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["passwort"] = this.passwort;
        return data;
    }
}

export interface IBenutzerLoginDto {
    email?: string | undefined;
    passwort?: string | undefined;
}

export class BenutzerRegistrierungDto implements IBenutzerRegistrierungDto {
    email?: string | undefined;
    passwort?: string | undefined;
    vorname?: string | undefined;
    nachname?: string | undefined;
    telefon?: string | undefined;
    rolleId?: number;
    adresse?: AdresseDto;
    mitgliederkarteIdentifikationsNummer?: string | undefined;

    constructor(data?: IBenutzerRegistrierungDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.passwort = _data["passwort"];
            this.vorname = _data["vorname"];
            this.nachname = _data["nachname"];
            this.telefon = _data["telefon"];
            this.rolleId = _data["rolleId"];
            this.adresse = _data["adresse"] ? AdresseDto.fromJS(_data["adresse"]) : <any>undefined;
            this.mitgliederkarteIdentifikationsNummer = _data["mitgliederkarteIdentifikationsNummer"];
        }
    }

    static fromJS(data: any): BenutzerRegistrierungDto {
        data = typeof data === 'object' ? data : {};
        let result = new BenutzerRegistrierungDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["passwort"] = this.passwort;
        data["vorname"] = this.vorname;
        data["nachname"] = this.nachname;
        data["telefon"] = this.telefon;
        data["rolleId"] = this.rolleId;
        data["adresse"] = this.adresse ? this.adresse.toJSON() : <any>undefined;
        data["mitgliederkarteIdentifikationsNummer"] = this.mitgliederkarteIdentifikationsNummer;
        return data;
    }
}

export interface IBenutzerRegistrierungDto {
    email?: string | undefined;
    passwort?: string | undefined;
    vorname?: string | undefined;
    nachname?: string | undefined;
    telefon?: string | undefined;
    rolleId?: number;
    adresse?: AdresseDto;
    mitgliederkarteIdentifikationsNummer?: string | undefined;
}

export class BenutzerUpdateDto implements IBenutzerUpdateDto {
    vorname?: string | undefined;
    nachname?: string | undefined;
    telefon?: string | undefined;
    adresse?: AdresseDto;

    constructor(data?: IBenutzerUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vorname = _data["vorname"];
            this.nachname = _data["nachname"];
            this.telefon = _data["telefon"];
            this.adresse = _data["adresse"] ? AdresseDto.fromJS(_data["adresse"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BenutzerUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new BenutzerUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vorname"] = this.vorname;
        data["nachname"] = this.nachname;
        data["telefon"] = this.telefon;
        data["adresse"] = this.adresse ? this.adresse.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBenutzerUpdateDto {
    vorname?: string | undefined;
    nachname?: string | undefined;
    telefon?: string | undefined;
    adresse?: AdresseDto;
}

export class Film implements IFilm {
    filmId?: number;
    titel!: string;
    dauer!: number;
    beschreibung?: string | undefined;
    altersfreigabe!: string;
    genreId?: number;
    spracheId?: number;
    genre?: Genre;
    sprache?: Sprache;

    constructor(data?: IFilm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.filmId = _data["filmId"];
            this.titel = _data["titel"];
            this.dauer = _data["dauer"];
            this.beschreibung = _data["beschreibung"];
            this.altersfreigabe = _data["altersfreigabe"];
            this.genreId = _data["genreId"];
            this.spracheId = _data["spracheId"];
            this.genre = _data["genre"] ? Genre.fromJS(_data["genre"]) : <any>undefined;
            this.sprache = _data["sprache"] ? Sprache.fromJS(_data["sprache"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Film {
        data = typeof data === 'object' ? data : {};
        let result = new Film();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filmId"] = this.filmId;
        data["titel"] = this.titel;
        data["dauer"] = this.dauer;
        data["beschreibung"] = this.beschreibung;
        data["altersfreigabe"] = this.altersfreigabe;
        data["genreId"] = this.genreId;
        data["spracheId"] = this.spracheId;
        data["genre"] = this.genre ? this.genre.toJSON() : <any>undefined;
        data["sprache"] = this.sprache ? this.sprache.toJSON() : <any>undefined;
        return data;
    }
}

export interface IFilm {
    filmId?: number;
    titel: string;
    dauer: number;
    beschreibung?: string | undefined;
    altersfreigabe: string;
    genreId?: number;
    spracheId?: number;
    genre?: Genre;
    sprache?: Sprache;
}

export class Genre implements IGenre {
    genreId?: number;
    name!: string;
    filme?: Film[] | undefined;

    constructor(data?: IGenre) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.genreId = _data["genreId"];
            this.name = _data["name"];
            if (Array.isArray(_data["filme"])) {
                this.filme = [] as any;
                for (let item of _data["filme"])
                    this.filme!.push(Film.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Genre {
        data = typeof data === 'object' ? data : {};
        let result = new Genre();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["genreId"] = this.genreId;
        data["name"] = this.name;
        if (Array.isArray(this.filme)) {
            data["filme"] = [];
            for (let item of this.filme)
                data["filme"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGenre {
    genreId?: number;
    name: string;
    filme?: Film[] | undefined;
}

export class Kino implements IKino {
    kinoId?: number;
    name!: string;
    adressId?: number;
    adresse?: Adresse;
    saele?: Saal[] | undefined;

    constructor(data?: IKino) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.kinoId = _data["kinoId"];
            this.name = _data["name"];
            this.adressId = _data["adressId"];
            this.adresse = _data["adresse"] ? Adresse.fromJS(_data["adresse"]) : <any>undefined;
            if (Array.isArray(_data["saele"])) {
                this.saele = [] as any;
                for (let item of _data["saele"])
                    this.saele!.push(Saal.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Kino {
        data = typeof data === 'object' ? data : {};
        let result = new Kino();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kinoId"] = this.kinoId;
        data["name"] = this.name;
        data["adressId"] = this.adressId;
        data["adresse"] = this.adresse ? this.adresse.toJSON() : <any>undefined;
        if (Array.isArray(this.saele)) {
            data["saele"] = [];
            for (let item of this.saele)
                data["saele"].push(item.toJSON());
        }
        return data;
    }
}

export interface IKino {
    kinoId?: number;
    name: string;
    adressId?: number;
    adresse?: Adresse;
    saele?: Saal[] | undefined;
}

export class Mitgliederkarte implements IMitgliederkarte {
    mitgliederkarteId?: number;
    verfügbareBetrag!: number;
    ablaufdatum?: Date | undefined;
    identifikationsNummer!: string;
    anzahlGekaufterTickets!: number;
    benutzerId?: number | undefined;
    mitgliederstatusId?: number;
    zahlungsmethodeId?: number | undefined;
    benutzer?: Benutzer;
    mitgliederstatus?: Mitgliederstatus;
    zahlungsmethode?: Zahlungsmethode;

    constructor(data?: IMitgliederkarte) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mitgliederkarteId = _data["mitgliederkarteId"];
            this.verfügbareBetrag = _data["verfügbareBetrag"];
            this.ablaufdatum = _data["ablaufdatum"] ? new Date(_data["ablaufdatum"].toString()) : <any>undefined;
            this.identifikationsNummer = _data["identifikationsNummer"];
            this.anzahlGekaufterTickets = _data["anzahlGekaufterTickets"];
            this.benutzerId = _data["benutzerId"];
            this.mitgliederstatusId = _data["mitgliederstatusId"];
            this.zahlungsmethodeId = _data["zahlungsmethodeId"];
            this.benutzer = _data["benutzer"] ? Benutzer.fromJS(_data["benutzer"]) : <any>undefined;
            this.mitgliederstatus = _data["mitgliederstatus"] ? Mitgliederstatus.fromJS(_data["mitgliederstatus"]) : <any>undefined;
            this.zahlungsmethode = _data["zahlungsmethode"] ? Zahlungsmethode.fromJS(_data["zahlungsmethode"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Mitgliederkarte {
        data = typeof data === 'object' ? data : {};
        let result = new Mitgliederkarte();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mitgliederkarteId"] = this.mitgliederkarteId;
        data["verfügbareBetrag"] = this.verfügbareBetrag;
        data["ablaufdatum"] = this.ablaufdatum ? this.ablaufdatum.toISOString() : <any>undefined;
        data["identifikationsNummer"] = this.identifikationsNummer;
        data["anzahlGekaufterTickets"] = this.anzahlGekaufterTickets;
        data["benutzerId"] = this.benutzerId;
        data["mitgliederstatusId"] = this.mitgliederstatusId;
        data["zahlungsmethodeId"] = this.zahlungsmethodeId;
        data["benutzer"] = this.benutzer ? this.benutzer.toJSON() : <any>undefined;
        data["mitgliederstatus"] = this.mitgliederstatus ? this.mitgliederstatus.toJSON() : <any>undefined;
        data["zahlungsmethode"] = this.zahlungsmethode ? this.zahlungsmethode.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMitgliederkarte {
    mitgliederkarteId?: number;
    verfügbareBetrag: number;
    ablaufdatum?: Date | undefined;
    identifikationsNummer: string;
    anzahlGekaufterTickets: number;
    benutzerId?: number | undefined;
    mitgliederstatusId?: number;
    zahlungsmethodeId?: number | undefined;
    benutzer?: Benutzer;
    mitgliederstatus?: Mitgliederstatus;
    zahlungsmethode?: Zahlungsmethode;
}

export class Mitgliederstatus implements IMitgliederstatus {
    mitgliederstatusId?: number;
    statusName!: string;
    rabatt?: number | undefined;

    constructor(data?: IMitgliederstatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mitgliederstatusId = _data["mitgliederstatusId"];
            this.statusName = _data["statusName"];
            this.rabatt = _data["rabatt"];
        }
    }

    static fromJS(data: any): Mitgliederstatus {
        data = typeof data === 'object' ? data : {};
        let result = new Mitgliederstatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mitgliederstatusId"] = this.mitgliederstatusId;
        data["statusName"] = this.statusName;
        data["rabatt"] = this.rabatt;
        return data;
    }
}

export interface IMitgliederstatus {
    mitgliederstatusId?: number;
    statusName: string;
    rabatt?: number | undefined;
}

export class Reihe implements IReihe {
    reiheId?: number;
    nummer!: number;
    saalId?: number;
    sitze?: Sitz[] | undefined;
    saal?: Saal;

    constructor(data?: IReihe) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reiheId = _data["reiheId"];
            this.nummer = _data["nummer"];
            this.saalId = _data["saalId"];
            if (Array.isArray(_data["sitze"])) {
                this.sitze = [] as any;
                for (let item of _data["sitze"])
                    this.sitze!.push(Sitz.fromJS(item));
            }
            this.saal = _data["saal"] ? Saal.fromJS(_data["saal"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Reihe {
        data = typeof data === 'object' ? data : {};
        let result = new Reihe();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reiheId"] = this.reiheId;
        data["nummer"] = this.nummer;
        data["saalId"] = this.saalId;
        if (Array.isArray(this.sitze)) {
            data["sitze"] = [];
            for (let item of this.sitze)
                data["sitze"].push(item.toJSON());
        }
        data["saal"] = this.saal ? this.saal.toJSON() : <any>undefined;
        return data;
    }
}

export interface IReihe {
    reiheId?: number;
    nummer: number;
    saalId?: number;
    sitze?: Sitz[] | undefined;
    saal?: Saal;
}

export class Rolle implements IRolle {
    rolleId?: number;
    name!: string;

    constructor(data?: IRolle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.rolleId = _data["rolleId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Rolle {
        data = typeof data === 'object' ? data : {};
        let result = new Rolle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rolleId"] = this.rolleId;
        data["name"] = this.name;
        return data;
    }
}

export interface IRolle {
    rolleId?: number;
    name: string;
}

export class Saal implements ISaal {
    saalId?: number;
    name!: string;
    nummer?: number | undefined;
    kinoId?: number;
    reihen?: Reihe[] | undefined;
    kino?: Kino;

    constructor(data?: ISaal) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.saalId = _data["saalId"];
            this.name = _data["name"];
            this.nummer = _data["nummer"];
            this.kinoId = _data["kinoId"];
            if (Array.isArray(_data["reihen"])) {
                this.reihen = [] as any;
                for (let item of _data["reihen"])
                    this.reihen!.push(Reihe.fromJS(item));
            }
            this.kino = _data["kino"] ? Kino.fromJS(_data["kino"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Saal {
        data = typeof data === 'object' ? data : {};
        let result = new Saal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saalId"] = this.saalId;
        data["name"] = this.name;
        data["nummer"] = this.nummer;
        data["kinoId"] = this.kinoId;
        if (Array.isArray(this.reihen)) {
            data["reihen"] = [];
            for (let item of this.reihen)
                data["reihen"].push(item.toJSON());
        }
        data["kino"] = this.kino ? this.kino.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISaal {
    saalId?: number;
    name: string;
    nummer?: number | undefined;
    kinoId?: number;
    reihen?: Reihe[] | undefined;
    kino?: Kino;
}

export class SaalDto implements ISaalDto {
    saal?: Saal;
    anzahlReihen?: number;
    anzahlSitzeProReihe?: number;

    constructor(data?: ISaalDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.saal = _data["saal"] ? Saal.fromJS(_data["saal"]) : <any>undefined;
            this.anzahlReihen = _data["anzahlReihen"];
            this.anzahlSitzeProReihe = _data["anzahlSitzeProReihe"];
        }
    }

    static fromJS(data: any): SaalDto {
        data = typeof data === 'object' ? data : {};
        let result = new SaalDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saal"] = this.saal ? this.saal.toJSON() : <any>undefined;
        data["anzahlReihen"] = this.anzahlReihen;
        data["anzahlSitzeProReihe"] = this.anzahlSitzeProReihe;
        return data;
    }
}

export interface ISaalDto {
    saal?: Saal;
    anzahlReihen?: number;
    anzahlSitzeProReihe?: number;
}

export class Sitz implements ISitz {
    sitzId?: number;
    nummer!: number;
    reiheId?: number;
    reihe?: Reihe;

    constructor(data?: ISitz) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sitzId = _data["sitzId"];
            this.nummer = _data["nummer"];
            this.reiheId = _data["reiheId"];
            this.reihe = _data["reihe"] ? Reihe.fromJS(_data["reihe"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Sitz {
        data = typeof data === 'object' ? data : {};
        let result = new Sitz();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sitzId"] = this.sitzId;
        data["nummer"] = this.nummer;
        data["reiheId"] = this.reiheId;
        data["reihe"] = this.reihe ? this.reihe.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISitz {
    sitzId?: number;
    nummer: number;
    reiheId?: number;
    reihe?: Reihe;
}

export class Sprache implements ISprache {
    spracheId?: number;
    name!: string;
    filme?: Film[] | undefined;

    constructor(data?: ISprache) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.spracheId = _data["spracheId"];
            this.name = _data["name"];
            if (Array.isArray(_data["filme"])) {
                this.filme = [] as any;
                for (let item of _data["filme"])
                    this.filme!.push(Film.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Sprache {
        data = typeof data === 'object' ? data : {};
        let result = new Sprache();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["spracheId"] = this.spracheId;
        data["name"] = this.name;
        if (Array.isArray(this.filme)) {
            data["filme"] = [];
            for (let item of this.filme)
                data["filme"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISprache {
    spracheId?: number;
    name: string;
    filme?: Film[] | undefined;
}

export class Ticket implements ITicket {
    ticketId?: number;
    preis!: number;
    status!: string;
    referenzNummer!: string;
    vorführungId?: number;
    sitzId?: number;
    benutzerId?: number;
    zahlungsmethodeId?: number;
    vorführung?: Vorführung;
    sitz?: Sitz;
    benutzer?: Benutzer;
    zahlungsmethode?: Zahlungsmethode;

    constructor(data?: ITicket) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ticketId = _data["ticketId"];
            this.preis = _data["preis"];
            this.status = _data["status"];
            this.referenzNummer = _data["referenzNummer"];
            this.vorführungId = _data["vorführungId"];
            this.sitzId = _data["sitzId"];
            this.benutzerId = _data["benutzerId"];
            this.zahlungsmethodeId = _data["zahlungsmethodeId"];
            this.vorführung = _data["vorführung"] ? Vorführung.fromJS(_data["vorführung"]) : <any>undefined;
            this.sitz = _data["sitz"] ? Sitz.fromJS(_data["sitz"]) : <any>undefined;
            this.benutzer = _data["benutzer"] ? Benutzer.fromJS(_data["benutzer"]) : <any>undefined;
            this.zahlungsmethode = _data["zahlungsmethode"] ? Zahlungsmethode.fromJS(_data["zahlungsmethode"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Ticket {
        data = typeof data === 'object' ? data : {};
        let result = new Ticket();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticketId"] = this.ticketId;
        data["preis"] = this.preis;
        data["status"] = this.status;
        data["referenzNummer"] = this.referenzNummer;
        data["vorführungId"] = this.vorführungId;
        data["sitzId"] = this.sitzId;
        data["benutzerId"] = this.benutzerId;
        data["zahlungsmethodeId"] = this.zahlungsmethodeId;
        data["vorführung"] = this.vorführung ? this.vorführung.toJSON() : <any>undefined;
        data["sitz"] = this.sitz ? this.sitz.toJSON() : <any>undefined;
        data["benutzer"] = this.benutzer ? this.benutzer.toJSON() : <any>undefined;
        data["zahlungsmethode"] = this.zahlungsmethode ? this.zahlungsmethode.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITicket {
    ticketId?: number;
    preis: number;
    status: string;
    referenzNummer: string;
    vorführungId?: number;
    sitzId?: number;
    benutzerId?: number;
    zahlungsmethodeId?: number;
    vorführung?: Vorführung;
    sitz?: Sitz;
    benutzer?: Benutzer;
    zahlungsmethode?: Zahlungsmethode;
}

export class Vorführung implements IVorführung {
    vorführungId?: number;
    datum!: Date;
    preis!: number;
    startZeit!: Date;
    endZeit?: Date | undefined;
    saalId?: number;
    filmId?: number;
    saal?: Saal;
    film?: Film;
    tickets?: Ticket[] | undefined;

    constructor(data?: IVorführung) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vorführungId = _data["vorführungId"];
            this.datum = _data["datum"] ? new Date(_data["datum"].toString()) : <any>undefined;
            this.preis = _data["preis"];
            this.startZeit = _data["startZeit"] ? new Date(_data["startZeit"].toString()) : <any>undefined;
            this.endZeit = _data["endZeit"] ? new Date(_data["endZeit"].toString()) : <any>undefined;
            this.saalId = _data["saalId"];
            this.filmId = _data["filmId"];
            this.saal = _data["saal"] ? Saal.fromJS(_data["saal"]) : <any>undefined;
            this.film = _data["film"] ? Film.fromJS(_data["film"]) : <any>undefined;
            if (Array.isArray(_data["tickets"])) {
                this.tickets = [] as any;
                for (let item of _data["tickets"])
                    this.tickets!.push(Ticket.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Vorführung {
        data = typeof data === 'object' ? data : {};
        let result = new Vorführung();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vorführungId"] = this.vorführungId;
        data["datum"] = this.datum ? this.datum.toISOString() : <any>undefined;
        data["preis"] = this.preis;
        data["startZeit"] = this.startZeit ? this.startZeit.toISOString() : <any>undefined;
        data["endZeit"] = this.endZeit ? this.endZeit.toISOString() : <any>undefined;
        data["saalId"] = this.saalId;
        data["filmId"] = this.filmId;
        data["saal"] = this.saal ? this.saal.toJSON() : <any>undefined;
        data["film"] = this.film ? this.film.toJSON() : <any>undefined;
        if (Array.isArray(this.tickets)) {
            data["tickets"] = [];
            for (let item of this.tickets)
                data["tickets"].push(item.toJSON());
        }
        return data;
    }
}

export interface IVorführung {
    vorführungId?: number;
    datum: Date;
    preis: number;
    startZeit: Date;
    endZeit?: Date | undefined;
    saalId?: number;
    filmId?: number;
    saal?: Saal;
    film?: Film;
    tickets?: Ticket[] | undefined;
}

export class Zahlungsmethode implements IZahlungsmethode {
    zahlungsmethodeId?: number;
    name!: string;
    tickets?: Ticket[] | undefined;
    mitgliederkarten?: Mitgliederkarte[] | undefined;

    constructor(data?: IZahlungsmethode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.zahlungsmethodeId = _data["zahlungsmethodeId"];
            this.name = _data["name"];
            if (Array.isArray(_data["tickets"])) {
                this.tickets = [] as any;
                for (let item of _data["tickets"])
                    this.tickets!.push(Ticket.fromJS(item));
            }
            if (Array.isArray(_data["mitgliederkarten"])) {
                this.mitgliederkarten = [] as any;
                for (let item of _data["mitgliederkarten"])
                    this.mitgliederkarten!.push(Mitgliederkarte.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Zahlungsmethode {
        data = typeof data === 'object' ? data : {};
        let result = new Zahlungsmethode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["zahlungsmethodeId"] = this.zahlungsmethodeId;
        data["name"] = this.name;
        if (Array.isArray(this.tickets)) {
            data["tickets"] = [];
            for (let item of this.tickets)
                data["tickets"].push(item.toJSON());
        }
        if (Array.isArray(this.mitgliederkarten)) {
            data["mitgliederkarten"] = [];
            for (let item of this.mitgliederkarten)
                data["mitgliederkarten"].push(item.toJSON());
        }
        return data;
    }
}

export interface IZahlungsmethode {
    zahlungsmethodeId?: number;
    name: string;
    tickets?: Ticket[] | undefined;
    mitgliederkarten?: Mitgliederkarte[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

}